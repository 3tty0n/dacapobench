diff -ur ../../tmp/core/src/main/java/site/ycsb/Client.java core/src/main/java/site/ycsb/Client.java
--- ../../tmp/core/src/main/java/site/ycsb/Client.java	2020-06-13 15:24:43.000000000 +1000
+++ core/src/main/java/site/ycsb/Client.java	2020-06-13 21:20:27.550101957 +1000
@@ -267,9 +267,10 @@
 
       Measurements.getMeasurements().exportMeasurements(exporter);
     } finally {
-      if (exporter != null) {
-        exporter.close();
-      }
+      // DaCapo XXX: closing the exporter will also close the DaCapo TeePrintStream
+      // if (exporter != null) {
+      //   exporter.close();
+      // }
     }
   }
 
@@ -305,7 +306,6 @@
 
     initWorkload(props, warningthread, workload, tracer);
 
-    System.err.println("Starting test.");
     final CountDownLatch completeLatch = new CountDownLatch(threadcount);
 
     final List<ClientThread> clients = initDb(dbname, props, threadcount, targetperthreadperms,
@@ -378,7 +378,7 @@
             // ignored
           }
         }
-
+        System.err.println("...done.");
         workload.cleanup();
       }
     } catch (WorkloadException e) {
@@ -396,8 +396,8 @@
       e.printStackTrace();
       System.exit(-1);
     }
-
-    System.exit(0);
+    // DaCapo: don't bomb the system/process when finish
+    // System.exit(0);
   }
 
   private static List<ClientThread> initDb(String dbname, Properties props, int threadcount,
@@ -409,14 +409,17 @@
     final List<ClientThread> clients = new ArrayList<>(threadcount);
     try (final TraceScope span = tracer.newScope(CLIENT_INIT_SPAN)) {
       int opcount;
+
       if (dotransactions) {
         opcount = Integer.parseInt(props.getProperty(OPERATION_COUNT_PROPERTY, "0"));
+        System.err.println("    operations: "+props.getProperty(OPERATION_COUNT_PROPERTY));
       } else {
         if (props.containsKey(INSERT_COUNT_PROPERTY)) {
           opcount = Integer.parseInt(props.getProperty(INSERT_COUNT_PROPERTY, "0"));
         } else {
           opcount = Integer.parseInt(props.getProperty(RECORD_COUNT_PROPERTY, DEFAULT_RECORD_COUNT));
         }
+        System.err.println("    records: "+props.getProperty(RECORD_COUNT_PROPERTY));
       }
       if (threadcount > opcount){
         threadcount = opcount;
@@ -506,13 +509,11 @@
     try {
       Properties projectProp = new Properties();
       projectProp.load(classLoader.getResourceAsStream("project.properties"));
-      System.err.println("YCSB Client " + projectProp.getProperty("version"));
+      System.err.println("    YCSB Client " + projectProp.getProperty("version"));
+      System.err.println("    workload: "+props.getProperty(WORKLOAD_PROPERTY));
     } catch (IOException e) {
       System.err.println("Unable to retrieve client version.");
     }
-
-    System.err.println();
-    System.err.println("Loading workload...");
     try {
       Class workloadclass = classLoader.loadClass(props.getProperty(WORKLOAD_PROPERTY));
 
@@ -528,15 +529,8 @@
 
   private static Properties parseArguments(String[] args) {
     Properties props = new Properties();
-    System.err.print("Command line:");
-    for (String arg : args) {
-      System.err.print(" " + arg);
-    }
-    System.err.println();
-
     Properties fileprops = new Properties();
     int argindex = 0;
-
     if (args.length == 0) {
       usageMessage();
       System.out.println("At least one argument specifying a workload is required.");
@@ -565,9 +559,11 @@
         props.setProperty(TARGET_PROPERTY, String.valueOf(ttarget));
         argindex++;
       } else if (args[argindex].compareTo("-load") == 0) {
+        System.err.println("Loading database... ");
         props.setProperty(DO_TRANSACTIONS_PROPERTY, String.valueOf(false));
         argindex++;
       } else if (args[argindex].compareTo("-t") == 0) {
+        System.err.println("Running transactions... ");
         props.setProperty(DO_TRANSACTIONS_PROPERTY, String.valueOf(true));
         argindex++;
       } else if (args[argindex].compareTo("-s") == 0) {
diff -ur ../../tmp/core/src/main/java/site/ycsb/DBWrapper.java core/src/main/java/site/ycsb/DBWrapper.java
--- ../../tmp/core/src/main/java/site/ycsb/DBWrapper.java	2020-06-13 15:24:42.000000000 +1000
+++ core/src/main/java/site/ycsb/DBWrapper.java	2020-06-13 21:17:40.174086332 +1000
@@ -97,9 +97,11 @@
         }
       }
 
-      System.err.println("DBWrapper: report latency for each error is " +
-          this.reportLatencyForEachError + " and specific error codes to track" +
-          " for latency are: " + this.latencyTrackedErrors.toString());
+      if (reportLatencyForEachError) {
+        System.err.println("DBWrapper: report latency for each error is " +
+            this.reportLatencyForEachError + " and specific error codes to track" +
+            " for latency are: " + this.latencyTrackedErrors.toString());
+      }
     }
   }
 
Only in core: target
