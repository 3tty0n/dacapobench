--- settings.gradle	2019-02-15 16:33:07.000000000 +1100
+++ ../build-src/settings.gradle	2019-02-20 20:12:38.000000000 +1100
@@ -4,8 +4,8 @@
 include 'h2o-algos'
 include 'h2o-web'
 include 'h2o-app'
-include 'h2o-r'
-include 'h2o-py'
+//include 'h2o-r'
+//include 'h2o-py'
 include 'h2o-assemblies:main'
 include 'h2o-assemblies:genmodel'
 include 'h2o-persist-gcs'
@@ -142,12 +142,12 @@
   }
 }
 
-apply plugin: ScalaCrossBuildPlugin
+// apply plugin: ScalaCrossBuildPlugin
 
-scalaCrossCompile {
-    targetVersions "2.10.7", "2.11.12"
-    include 'h2o-scala'
-}
+// scalaCrossCompile {
+//     targetVersions "2.10.7", "2.11.12"
+//     include 'h2o-scala'
+// }
 
 // Make structure flat and avoid annoying dummy modules
 rootProject.children.each { project ->
--- build.gradle        2020-06-27 13:17:19.000000000 +1000
+++ ../build/build.gradle       2020-06-27 13:27:09.102550028 +1000
@@ -126,18 +126,18 @@
       project(':h2o-genmodel-ext-deepwater')
     ]
 
-    scalaProjects = [
-      project(':h2o-scala_2.10'),
-      project(':h2o-scala_2.11'),
-    ]
-
-    rProjects = [
-      project(':h2o-r')
-    ]
-
-    pythonProjects = [
-      project(':h2o-py')
-    ]
+//    scalaProjects = [
+//      project(':h2o-scala_2.10'),
+//      project(':h2o-scala_2.11'),
+//    ]
+//
+//    rProjects = [
+//      project(':h2o-r')
+//    ]
+//
+//    pythonProjects = [
+//      project(':h2o-py')
+//    ]
 
     // The project which need to be run under CI only
     testNeedsCiProject = [
@@ -241,9 +241,9 @@
 
     // Publish artifacts - we should filter subproject in future but now apply publisher plugin
     // to all projects
-    if (project in publishedProjects) {
-      apply from: "$rootDir/gradle/publish.gradle"
-    }
+//    if (project in publishedProjects) {
+//      apply from: "$rootDir/gradle/publish.gradle"
+//    }
 
     // Note: this is deprecated and will be removed in the future
     apply from: "$rootDir/gradle/makeSupport.gradle"
@@ -277,28 +277,28 @@
     }
 
     // Configure Scala projects
-    if (project in scalaProjects) {
-        apply from: "$rootDir/gradle/scala.gradle"
-        apply from: "$rootDir/gradle/cp.gradle"
-        if (testNeedsCiProject.contains(project)) {
-            logger.warn("The project $project needs CI for running tests! You can pass `-PdoCI=true` to force CI behaviour.")
-            project.testMultiNode.enabled = isCi
-        }
-    }
-
-    if (project in rProjects) {
-        apply from: "$rootDir/gradle/r.gradle"
-    }
-
-    if (project in pythonProjects) {
-        apply from: "$rootDir/gradle/r.gradle"   // same plugins
-    }
-
-    if (project in ubenchProjects) {
-        if (project.hasProperty("doUBench") && project.doUBench == "true") {
-            apply from: "$rootDir/gradle/ubench.gradle"
-        }
-    }
+    // if (project in scalaProjects) {
+    //     apply from: "$rootDir/gradle/scala.gradle"
+    //     apply from: "$rootDir/gradle/cp.gradle"
+    //     if (testNeedsCiProject.contains(project)) {
+    //         logger.warn("The project $project needs CI for running tests! You can pass `-PdoCI=true` to force CI behaviour.")
+    //         project.testMultiNode.enabled = isCi
+    //     }
+    // }
+
+    // if (project in rProjects) {
+    //     apply from: "$rootDir/gradle/r.gradle"
+    // }
+
+    // if (project in pythonProjects) {
+    //     apply from: "$rootDir/gradle/r.gradle"   // same plugins
+    // }
+
+    // if (project in ubenchProjects) {
+    //     if (project.hasProperty("doUBench") && project.doUBench == "true") {
+    //         apply from: "$rootDir/gradle/ubench.gradle"
+    //     }
+    // }
 }
 
 //
--- h2o-assemblies/main/build.gradle	2019-02-15 16:33:05.000000000 +1100
+++ ../build-src/h2o-assemblies/main/build.gradle	2019-02-20 20:18:27.000000000 +1100
@@ -162,6 +162,6 @@
 // Include licences
 shadowJar.dependsOn(licenseReport)
 // Execute always copyJar
-shadowJar.finalizedBy copyJar
+//shadowJar.finalizedBy copyJar
 // Run shadowJar as part of build
 jar.finalizedBy shadowJar
